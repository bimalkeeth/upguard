// Code generated by mockery v2.46.3. DO NOT EDIT.

package interfaces

import (
	interfaces "github.com/bimalkeeth/upguard/microbatching/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockJob is an autogenerated mock type for the Job type
type MockJob[T any, R any] struct {
	mock.Mock
}

type MockJob_Expecter[T any, R any] struct {
	mock *mock.Mock
}

func (_m *MockJob[T, R]) EXPECT() *MockJob_Expecter[T, R] {
	return &MockJob_Expecter[T, R]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MockJob[T, R]) Execute() interfaces.JobResult[R] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interfaces.JobResult[R]
	if rf, ok := ret.Get(0).(func() interfaces.JobResult[R]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.JobResult[R])
		}
	}

	return r0
}

// MockJob_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockJob_Execute_Call[T any, R any] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockJob_Expecter[T, R]) Execute() *MockJob_Execute_Call[T, R] {
	return &MockJob_Execute_Call[T, R]{Call: _e.mock.On("Execute")}
}

func (_c *MockJob_Execute_Call[T, R]) Run(run func()) *MockJob_Execute_Call[T, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Execute_Call[T, R]) Return(_a0 interfaces.JobResult[R]) *MockJob_Execute_Call[T, R] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_Execute_Call[T, R]) RunAndReturn(run func() interfaces.JobResult[R]) *MockJob_Execute_Call[T, R] {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *MockJob[T, R]) GetID() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockJob_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockJob_GetID_Call[T any, R any] struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockJob_Expecter[T, R]) GetID() *MockJob_GetID_Call[T, R] {
	return &MockJob_GetID_Call[T, R]{Call: _e.mock.On("GetID")}
}

func (_c *MockJob_GetID_Call[T, R]) Run(run func()) *MockJob_GetID_Call[T, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_GetID_Call[T, R]) Return(_a0 int) *MockJob_GetID_Call[T, R] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_GetID_Call[T, R]) RunAndReturn(run func() int) *MockJob_GetID_Call[T, R] {
	_c.Call.Return(run)
	return _c
}

// NewMockJob creates a new instance of MockJob. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJob[T any, R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJob[T, R] {
	mock := &MockJob[T, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
