// Code generated by mockery v2.46.3. DO NOT EDIT.

package interfaces

import (
	interfaces "github.com/bimalkeeth/upguard/microbatching/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockMicroBatcher is an autogenerated mock type for the MicroBatcher type
type MockMicroBatcher[T any, R any] struct {
	mock.Mock
}

type MockMicroBatcher_Expecter[T any, R any] struct {
	mock *mock.Mock
}

func (_m *MockMicroBatcher[T, R]) EXPECT() *MockMicroBatcher_Expecter[T, R] {
	return &MockMicroBatcher_Expecter[T, R]{mock: &_m.Mock}
}

// Submit provides a mock function with given fields: job
func (_m *MockMicroBatcher[T, R]) Submit(job interfaces.Job[T, R]) {
	_m.Called(job)
}

// MockMicroBatcher_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type MockMicroBatcher_Submit_Call[T any, R any] struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - job interfaces.Job[T,R]
func (_e *MockMicroBatcher_Expecter[T, R]) Submit(job interface{}) *MockMicroBatcher_Submit_Call[T, R] {
	return &MockMicroBatcher_Submit_Call[T, R]{Call: _e.mock.On("Submit", job)}
}

func (_c *MockMicroBatcher_Submit_Call[T, R]) Run(run func(job interfaces.Job[T, R])) *MockMicroBatcher_Submit_Call[T, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.Job[T, R]))
	})
	return _c
}

func (_c *MockMicroBatcher_Submit_Call[T, R]) Return() *MockMicroBatcher_Submit_Call[T, R] {
	_c.Call.Return()
	return _c
}

func (_c *MockMicroBatcher_Submit_Call[T, R]) RunAndReturn(run func(interfaces.Job[T, R])) *MockMicroBatcher_Submit_Call[T, R] {
	_c.Call.Return(run)
	return _c
}

// NewMockMicroBatcher creates a new instance of MockMicroBatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMicroBatcher[T any, R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMicroBatcher[T, R] {
	mock := &MockMicroBatcher[T, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
