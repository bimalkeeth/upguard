// Code generated by mockery v2.46.3. DO NOT EDIT.

package interfaces

import (
	interfaces "github.com/bimalkeeth/upguard/microbatching/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// MockBatchProcessor is an autogenerated mock type for the BatchProcessor type
type MockBatchProcessor[T any, R any] struct {
	mock.Mock
}

type MockBatchProcessor_Expecter[T any, R any] struct {
	mock *mock.Mock
}

func (_m *MockBatchProcessor[T, R]) EXPECT() *MockBatchProcessor_Expecter[T, R] {
	return &MockBatchProcessor_Expecter[T, R]{mock: &_m.Mock}
}

// ProcessBatch provides a mock function with given fields: jobs
func (_m *MockBatchProcessor[T, R]) ProcessBatch(jobs []interfaces.Job[T, R]) []interfaces.JobResult[R] {
	ret := _m.Called(jobs)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBatch")
	}

	var r0 []interfaces.JobResult[R]
	if rf, ok := ret.Get(0).(func([]interfaces.Job[T, R]) []interfaces.JobResult[R]); ok {
		r0 = rf(jobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.JobResult[R])
		}
	}

	return r0
}

// MockBatchProcessor_ProcessBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBatch'
type MockBatchProcessor_ProcessBatch_Call[T any, R any] struct {
	*mock.Call
}

// ProcessBatch is a helper method to define mock.On call
//   - jobs []interfaces.Job[T,R]
func (_e *MockBatchProcessor_Expecter[T, R]) ProcessBatch(jobs interface{}) *MockBatchProcessor_ProcessBatch_Call[T, R] {
	return &MockBatchProcessor_ProcessBatch_Call[T, R]{Call: _e.mock.On("ProcessBatch", jobs)}
}

func (_c *MockBatchProcessor_ProcessBatch_Call[T, R]) Run(run func(jobs []interfaces.Job[T, R])) *MockBatchProcessor_ProcessBatch_Call[T, R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]interfaces.Job[T, R]))
	})
	return _c
}

func (_c *MockBatchProcessor_ProcessBatch_Call[T, R]) Return(_a0 []interfaces.JobResult[R]) *MockBatchProcessor_ProcessBatch_Call[T, R] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBatchProcessor_ProcessBatch_Call[T, R]) RunAndReturn(run func([]interfaces.Job[T, R]) []interfaces.JobResult[R]) *MockBatchProcessor_ProcessBatch_Call[T, R] {
	_c.Call.Return(run)
	return _c
}

// NewMockBatchProcessor creates a new instance of MockBatchProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBatchProcessor[T any, R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBatchProcessor[T, R] {
	mock := &MockBatchProcessor[T, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
